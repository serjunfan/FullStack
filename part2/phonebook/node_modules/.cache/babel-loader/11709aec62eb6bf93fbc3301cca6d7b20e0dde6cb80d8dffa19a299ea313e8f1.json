{"ast":null,"code":"var _jsxFileName = \"/home/luinpin/fullstack/part1/src/App.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ShowHeader = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" give feedback \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 6,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 7,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c = ShowHeader;\nconst ShowStatistics = _ref => {\n  let {\n    good,\n    neutral,\n    bad\n  } = _ref;\n  let all = good + neutral + bad;\n  let average = (good - bad) / all;\n  let positive = good / all;\n  if (all == 0) return /*#__PURE__*/_jsxDEV(\"p\", {\n    children: \" No feedback given \"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 12\n  }, this);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \" statistics \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" good \", good]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" neutral \", neutral]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" bad \", bad]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" all \", all]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" average \", average, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\" positive \", positive, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_c2 = ShowStatistics;\nconst Button = props => {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: props.handleClick,\n    children: props.text\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 9\n  }, this);\n};\n_c3 = Button;\nconst App = () => {\n  _s();\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(ShowHeader, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setGood(good + 1),\n      text: \"good\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setNeutral(neutral + 1),\n      text: \"neutral\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      handleClick: () => setBad(bad + 1),\n      text: \"bad\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ShowStatistics, {\n      good: good,\n      neutral: neutral,\n      bad: bad\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 5\n  }, this);\n};\n_s(App, \"eScCFcZxMV7EVTyq8/QmtvFilbs=\");\n_c4 = App;\nexport default App;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"ShowHeader\");\n$RefreshReg$(_c2, \"ShowStatistics\");\n$RefreshReg$(_c3, \"Button\");\n$RefreshReg$(_c4, \"App\");","map":{"version":3,"names":["useState","ShowHeader","ShowStatistics","good","neutral","bad","all","average","positive","Button","props","handleClick","text","App","setGood","setNeutral","setBad"],"sources":["/home/luinpin/fullstack/part1/src/App.js"],"sourcesContent":["import { useState } from 'react'\n\nconst ShowHeader = () =>{\n  return(\n    <>\n      <h1> give feedback </h1>\n      <br/>\n    </>\n  )\n}\nconst ShowStatistics = ({good, neutral, bad}) =>{\n  let all = good + neutral + bad\n  let average = (good - bad) / all\n  let positive = good / all\n  if(all == 0)\n    return <p> No feedback given </p>\n  return(\n    <>\n      <h1> statistics </h1>\n      <br/>\n      <p> good {good}</p>\n      <p> neutral {neutral}</p>\n      <p> bad {bad}</p>\n      <p> all {all}</p>\n      <p> average {average} </p>\n      <p> positive {positive} </p>\n    </>\n  )\n}\nconst Button = (props) =>{\n return(<button onClick={props.handleClick}> \n      {props.text} \n    </button>\n  )\n}\n\nconst App = () => {\n  // save clicks of each button to its own state\n  const [good, setGood] = useState(0);\n  const [neutral, setNeutral] = useState(0);\n  const [bad, setBad] = useState(0);\n\n\n  return(\n    <div>\n      <ShowHeader />\n      <Button handleClick={() => setGood(good+1)} text=\"good\" />\n      <Button handleClick={() => setNeutral(neutral+1)} text=\"neutral\" />\n      <Button handleClick={() => setBad(bad+1)} text=\"bad\" />\n      <ShowStatistics good={good} neutral={neutral} bad={bad} />\n    </div>\n  )\n}\n\nexport default App\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}